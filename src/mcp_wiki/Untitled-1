"""
Usage:
    read_wikipedia_article("https://en.wikipedia.org/wiki/Python_(programming_language)")
"""

import requests
from requests.exceptions import RequestException
import html2text
from bs4 import BeautifulSoup

class McpError(Exception):
    def __init__(self, error_data):
        self.error_data = error_data
        super().__init__(str(error_data))

class ErrorData:
    def __init__(self, code, message):
        self.code = code
        self.message = message

    def __str__(self):
        return f"[{self.code}] {self.message}"

# Error codes
INTERNAL_ERROR = "INTERNAL_ERROR"
INVALID_PARAMS = "INVALID_PARAMS"

def read_wikipedia_article(url):
    try:
        # Validate input
        if not url.startswith("http"):
            raise ValueError("URL must start with http or https.")

        response = requests.get(url, timeout=10)
        if response.status_code != 200:
            raise McpError(
                ErrorData(
                    INTERNAL_ERROR,
                    f"Failed to retrieve the article. HTTP status code: {response.status_code}"
                )
            )

        soup = BeautifulSoup(response.text, "html.parser")
        content_div = soup.find("div", {"id": "mw-content-text"})
        if not content_div:
            raise McpError(
                ErrorData(
                    INVALID_PARAMS,
                    "Could not find the main content on the provided Wikipedia URL."
                )
            )

        markdown_text = html2text.html2text(str(content_div))
        markdown_text = html2text(str(content_div))
        return markdown_text

    except ValueError as e:
        raise McpError(ErrorData(INVALID_PARAMS, str(e))) from e
    except RequestException as e:
        raise McpError(ErrorData(INTERNAL_ERROR, f"Request error: {str(e)}")) from e
    except Exception as e:
        raise McpError(ErrorData(INTERNAL_ERROR, f"Unexpected error: {str(e)}")) from e